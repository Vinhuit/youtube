<!DOCTYPE html>
<html>
<head>
  <title>YouTube Broadcast</title>
  <link rel="stylesheet" type="text/css" href="css/style.css" />
  <script src='components/jquery/dist/jquery.min.js'></script>
  <script src='https://cdn.firebase.com/js/client/1.0.15/firebase.js'></script>
  <script type="text/javascript" src="js/swfobject.js"></script> 
</head>
<body>
  <%- body %>
  <script type="text/javascript">
    var host = false;
    var videoID = "";
    var playTime = 0;
    var player;
    var playTimer;
    var playerState = -1;

    if (window.location.pathname === "/host") {
      host = true;
    }
    
    // FIREBASE
    // if (!host) {
      var myDataRef = new Firebase('https://dazzling-inferno-4118.firebaseio.com/');

      // Get current play time
      myDataRef.child("videoTime").on("value", function(snapshot) {
        playTime = snapshot.val();
        console.log("new playtime:", playTime);
        if (playerState !== 1) {
          player.seekTo(playTime);
        }
      });

      // Get video ID
      myDataRef.child("videoID").on("value", function(snapshot) {
        videoID = snapshot.val();
        $("#url").val("https://www.youtube.com/watch?v="+videoID)
        createPlayer();
      });

      // Get player state
      myDataRef.child("state").on("value", function(snapshot) {
        playerState = snapshot.val();
        if (!host) {
          if (playerState === 1) {
            play(playTime);
          } else {
            stop();
          }
        }
      });
    // }

    // YOUTUBE
     // 2. This code loads the IFrame Player API code asynchronously.
     var tag = document.createElement('script');

     tag.src = "https://www.youtube.com/iframe_api";
     var firstScriptTag = document.getElementsByTagName('script')[0];
     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      function createPlayer() {
        player = new YT.Player('player', {
          height: '100%',
          width: '100%',
          videoId: videoID,
          playerVars: {
            start: playTime
          },
          events: {
            // 'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      function onPlayerStateChange(event) {
        var newState = event.data;
        if (host) {
          myDataRef.child("state").set(newState);
          if (newState === 1) {
            // playTimer = setInterval(updateTime, 250);
          } else {
            // clearInterval(playTimer);
          }
        }
      }

      function play(time) {
        time = time || 0;
        if (player) {
          player.playVideo();
          player.seekTo(time);
          console.log("seeked to time:", time);
        }
      }
      function stop() {
        if (player) {
          player.pauseVideo();
        }
      }

    function updateTime() {
      playTime = player.getCurrentTime();
      // console.log("PLAY TIME:", playTime);
      if (host) {
        myDataRef.child("videoTime").set(playTime);
      }
    }

    function loadVideo() {
      var url = $("#url").val();
      var match = /=([A-Za-z0-9_-]+)/g;
      var result = match.exec(url);
      videoID = result[1];
      player.loadVideoById(videoID);

      if (host) {
        myDataRef.child("videoID").set(videoID);
      }
    }
    
    playTimer = setInterval(updateTime, 250);

    // FLASH YOUTUBE PLAYER
    // function createPlayer() {
    //   var ytplayer = "";
    //   var playTimer;
    //   var params = { allowScriptAccess: "always" };
    //   var atts = { id: "myytplayer" };
    //   swfobject.embedSWF("https://www.youtube.com/v/"+videoID+"?version=3&playerapiid=ytplayer&enablejsapi=1", "ytapiplayer", "100%", "100%", "8", null, null, params, atts);
    // }

    // function play(time) {
    //   time = time || 0;
    //   if (ytplayer) {
    //     ytplayer.seekTo(time);
    //   }
    // }
    // function pause() {
    //   if (ytplayer) {
    //     ytplayer.pauseVideo();
    //   }
    // }
    // function stop() {
    //   if (ytplayer) {
    //     ytplayer.stopVideo();
    //   }
    // }

    // function onYouTubePlayerReady(playerId) {
    //   console.log('ready');
    //   ytplayer = document.getElementById("myytplayer");
    //   ytplayer.addEventListener("onStateChange", "onytplayerStateChange");
    // }

    // function onytplayerStateChange(newState) {
    //   if (host) {
    //     myDataRef.child("state").set(newState);
    //   }

    //   if (newState === 1) {
    //     playTimer = setInterval(updateTime, 100);
    //   } else {
    //     clearInterval(playTimer);
    //   }
    // }
  </script>
</body>
</html>
